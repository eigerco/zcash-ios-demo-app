//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: darkside.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Darksidewalletd maintains two staging areas, blocks and transactions. The
/// Stage*() gRPCs add items to the staging area; ApplyStaged() "applies" everything
/// in the staging area to the working (operational) state that the mock zcashd
/// serves; transactions are placed into their corresponding blocks (by height).
///
/// Usage: instantiate `DarksideStreamerClient`, then call methods of this protocol to make API calls.
public protocol DarksideStreamerClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: DarksideStreamerClientInterceptorFactoryProtocol? { get }

    func reset(
        _ request: DarksideMetaState,
        callOptions: CallOptions?
    ) -> UnaryCall<DarksideMetaState, Empty>

    func stageBlocksStream(
        callOptions: CallOptions?
    ) -> ClientStreamingCall<DarksideBlock, Empty>

    func stageBlocks(
        _ request: DarksideBlocksURL,
        callOptions: CallOptions?
    ) -> UnaryCall<DarksideBlocksURL, Empty>

    func stageBlocksCreate(
        _ request: DarksideEmptyBlocks,
        callOptions: CallOptions?
    ) -> UnaryCall<DarksideEmptyBlocks, Empty>

    func stageTransactionsStream(
        callOptions: CallOptions?
    ) -> ClientStreamingCall<RawTransaction, Empty>

    func stageTransactions(
        _ request: DarksideTransactionsURL,
        callOptions: CallOptions?
    ) -> UnaryCall<DarksideTransactionsURL, Empty>

    func applyStaged(
        _ request: DarksideHeight,
        callOptions: CallOptions?
    ) -> UnaryCall<DarksideHeight, Empty>

    func getIncomingTransactions(
        _ request: Empty,
        callOptions: CallOptions?,
        handler: @escaping (RawTransaction) -> Void
    ) -> ServerStreamingCall<Empty, RawTransaction>

    func clearIncomingTransactions(
        _ request: Empty,
        callOptions: CallOptions?
    ) -> UnaryCall<Empty, Empty>

    func addAddressUtxo(
        _ request: GetAddressUtxosReply,
        callOptions: CallOptions?
    ) -> UnaryCall<GetAddressUtxosReply, Empty>

    func clearAddressUtxo(
        _ request: Empty,
        callOptions: CallOptions?
    ) -> UnaryCall<Empty, Empty>

    func addTreeState(
        _ request: TreeState,
        callOptions: CallOptions?
    ) -> UnaryCall<TreeState, Empty>

    func removeTreeState(
        _ request: BlockID,
        callOptions: CallOptions?
    ) -> UnaryCall<BlockID, Empty>

    func clearAllTreeStates(
        _ request: Empty,
        callOptions: CallOptions?
    ) -> UnaryCall<Empty, Empty>
}

public extension DarksideStreamerClientProtocol {
    var serviceName: String {
        "cash.z.wallet.sdk.rpc.DarksideStreamer"
    }

    /// Reset reverts all darksidewalletd state (active block range, latest height,
    /// staged blocks and transactions) and lightwalletd state (cache) to empty,
    /// the same as the initial state. This occurs synchronously and instantaneously;
    /// no reorg happens in lightwalletd. This is good to do before each independent
    /// test so that no state leaks from one test to another.
    /// Also sets (some of) the values returned by GetLightdInfo(). The Sapling
    /// activation height specified here must be where the block range starts.
    ///
    /// - Parameters:
    ///   - request: Request to send to Reset.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func reset(
        _ request: DarksideMetaState,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<DarksideMetaState, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.reset.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResetInterceptors() ?? []
        )
    }

    /// StageBlocksStream accepts a list of blocks and saves them into the blocks
    /// staging area until ApplyStaged() is called; there is no immediate effect on
    /// the mock zcashd. Blocks are hex-encoded. Order is important, see ApplyStaged.
    ///
    /// Callers should use the `send` method on the returned object to send messages
    /// to the server. The caller should send an `.end` after the final message has been sent.
    ///
    /// - Parameters:
    ///   - callOptions: Call options.
    /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
    func stageBlocksStream(
        callOptions: CallOptions? = nil
    ) -> ClientStreamingCall<DarksideBlock, Empty> {
        makeClientStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocksStream.path,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksStreamInterceptors() ?? []
        )
    }

    /// StageBlocks is the same as StageBlocksStream() except the blocks are fetched
    /// from the given URL. Blocks are one per line, hex-encoded (not JSON).
    ///
    /// - Parameters:
    ///   - request: Request to send to StageBlocks.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func stageBlocks(
        _ request: DarksideBlocksURL,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<DarksideBlocksURL, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocks.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksInterceptors() ?? []
        )
    }

    /// StageBlocksCreate is like the previous two, except it creates 'count'
    /// empty blocks at consecutive heights starting at height 'height'. The
    /// 'nonce' is part of the header, so it contributes to the block hash; this
    /// lets you create identical blocks (same transactions and height), but with
    /// different hashes.
    ///
    /// - Parameters:
    ///   - request: Request to send to StageBlocksCreate.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func stageBlocksCreate(
        _ request: DarksideEmptyBlocks,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<DarksideEmptyBlocks, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocksCreate.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksCreateInterceptors() ?? []
        )
    }

    /// StageTransactionsStream stores the given transaction-height pairs in the
    /// staging area until ApplyStaged() is called. Note that these transactions
    /// are not returned by the production GetTransaction() gRPC until they
    /// appear in a "mined" block (contained in the active blockchain presented
    /// by the mock zcashd).
    ///
    /// Callers should use the `send` method on the returned object to send messages
    /// to the server. The caller should send an `.end` after the final message has been sent.
    ///
    /// - Parameters:
    ///   - callOptions: Call options.
    /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
    func stageTransactionsStream(
        callOptions: CallOptions? = nil
    ) -> ClientStreamingCall<RawTransaction, Empty> {
        makeClientStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.stageTransactionsStream.path,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageTransactionsStreamInterceptors() ?? []
        )
    }

    /// StageTransactions is the same except the transactions are fetched from
    /// the given url. They are all staged into the block at the given height.
    /// Staging transactions to different heights requires multiple calls.
    ///
    /// - Parameters:
    ///   - request: Request to send to StageTransactions.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func stageTransactions(
        _ request: DarksideTransactionsURL,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<DarksideTransactionsURL, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageTransactionsInterceptors() ?? []
        )
    }

    /// ApplyStaged iterates the list of blocks that were staged by the
    /// StageBlocks*() gRPCs, in the order they were staged, and "merges" each
    /// into the active, working blocks list that the mock zcashd is presenting
    /// to lightwalletd. Even as each block is applied, the active list can't
    /// have gaps; if the active block range is 1000-1006, and the staged block
    /// range is 1003-1004, the resulting range is 1000-1004, with 1000-1002
    /// unchanged, blocks 1003-1004 from the new range, and 1005-1006 dropped.
    ///
    /// After merging all blocks, ApplyStaged() appends staged transactions (in
    /// the order received) into each one's corresponding (by height) block
    /// The staging area is then cleared.
    ///
    /// The argument specifies the latest block height that mock zcashd reports
    /// (i.e. what's returned by GetLatestBlock). Note that ApplyStaged() can
    /// also be used to simply advance the latest block height presented by mock
    /// zcashd. That is, there doesn't need to be anything in the staging area.
    ///
    /// - Parameters:
    ///   - request: Request to send to ApplyStaged.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func applyStaged(
        _ request: DarksideHeight,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<DarksideHeight, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.applyStaged.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeApplyStagedInterceptors() ?? []
        )
    }

    /// Calls to the production gRPC SendTransaction() store the transaction in
    /// a separate area (not the staging area); this method returns all transactions
    /// in this separate area, which is then cleared. The height returned
    /// with each transaction is -1 (invalid) since these transactions haven't
    /// been mined yet. The intention is that the transactions returned here can
    /// then, for example, be given to StageTransactions() to get them "mined"
    /// into a specified block on the next ApplyStaged().
    ///
    /// - Parameters:
    ///   - request: Request to send to GetIncomingTransactions.
    ///   - callOptions: Call options.
    ///   - handler: A closure called when each response is received from the server.
    /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
    func getIncomingTransactions(
        _ request: Empty,
        callOptions: CallOptions? = nil,
        handler: @escaping (RawTransaction) -> Void
    ) -> ServerStreamingCall<Empty, RawTransaction> {
        makeServerStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.getIncomingTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetIncomingTransactionsInterceptors() ?? [],
            handler: handler
        )
    }

    /// Clear the incoming transaction pool.
    ///
    /// - Parameters:
    ///   - request: Request to send to ClearIncomingTransactions.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func clearIncomingTransactions(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Empty, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearIncomingTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearIncomingTransactionsInterceptors() ?? []
        )
    }

    /// Add a GetAddressUtxosReply entry to be returned by GetAddressUtxos().
    /// There is no staging or applying for these, very simple.
    ///
    /// - Parameters:
    ///   - request: Request to send to AddAddressUtxo.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func addAddressUtxo(
        _ request: GetAddressUtxosReply,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<GetAddressUtxosReply, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.addAddressUtxo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddAddressUtxoInterceptors() ?? []
        )
    }

    /// Clear the list of GetAddressUtxos entries (can't fail)
    ///
    /// - Parameters:
    ///   - request: Request to send to ClearAddressUtxo.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func clearAddressUtxo(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Empty, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearAddressUtxo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearAddressUtxoInterceptors() ?? []
        )
    }

    /// Adds a GetTreeState to the tree state cache
    ///
    /// - Parameters:
    ///   - request: Request to send to AddTreeState.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func addTreeState(
        _ request: TreeState,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<TreeState, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.addTreeState.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddTreeStateInterceptors() ?? []
        )
    }

    /// Removes a GetTreeState for the given height from cache if present (can't fail)
    ///
    /// - Parameters:
    ///   - request: Request to send to RemoveTreeState.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func removeTreeState(
        _ request: BlockID,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<BlockID, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.removeTreeState.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveTreeStateInterceptors() ?? []
        )
    }

    /// Clear the list of GetTreeStates entries (can't fail)
    ///
    /// - Parameters:
    ///   - request: Request to send to ClearAllTreeStates.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func clearAllTreeStates(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Empty, Empty> {
        makeUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearAllTreeStates.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearAllTreeStatesInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension DarksideStreamerClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "DarksideStreamerNIOClient")
public final class DarksideStreamerClient: DarksideStreamerClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: DarksideStreamerClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: DarksideStreamerClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the cash.z.wallet.sdk.rpc.DarksideStreamer service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: DarksideStreamerClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct DarksideStreamerNIOClient: DarksideStreamerClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: DarksideStreamerClientInterceptorFactoryProtocol?

    /// Creates a client for the cash.z.wallet.sdk.rpc.DarksideStreamer service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: DarksideStreamerClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

/// Darksidewalletd maintains two staging areas, blocks and transactions. The
/// Stage*() gRPCs add items to the staging area; ApplyStaged() "applies" everything
/// in the staging area to the working (operational) state that the mock zcashd
/// serves; transactions are placed into their corresponding blocks (by height).
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol DarksideStreamerAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: DarksideStreamerClientInterceptorFactoryProtocol? { get }

    func makeResetCall(
        _ request: DarksideMetaState,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<DarksideMetaState, Empty>

    func makeStageBlocksStreamCall(
        callOptions: CallOptions?
    ) -> GRPCAsyncClientStreamingCall<DarksideBlock, Empty>

    func makeStageBlocksCall(
        _ request: DarksideBlocksURL,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<DarksideBlocksURL, Empty>

    func makeStageBlocksCreateCall(
        _ request: DarksideEmptyBlocks,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<DarksideEmptyBlocks, Empty>

    func makeStageTransactionsStreamCall(
        callOptions: CallOptions?
    ) -> GRPCAsyncClientStreamingCall<RawTransaction, Empty>

    func makeStageTransactionsCall(
        _ request: DarksideTransactionsURL,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<DarksideTransactionsURL, Empty>

    func makeApplyStagedCall(
        _ request: DarksideHeight,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<DarksideHeight, Empty>

    func makeGetIncomingTransactionsCall(
        _ request: Empty,
        callOptions: CallOptions?
    ) -> GRPCAsyncServerStreamingCall<Empty, RawTransaction>

    func makeClearIncomingTransactionsCall(
        _ request: Empty,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Empty, Empty>

    func makeAddAddressUtxoCall(
        _ request: GetAddressUtxosReply,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<GetAddressUtxosReply, Empty>

    func makeClearAddressUtxoCall(
        _ request: Empty,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Empty, Empty>

    func makeAddTreeStateCall(
        _ request: TreeState,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<TreeState, Empty>

    func makeRemoveTreeStateCall(
        _ request: BlockID,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<BlockID, Empty>

    func makeClearAllTreeStatesCall(
        _ request: Empty,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Empty, Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension DarksideStreamerAsyncClientProtocol {
    static var serviceDescriptor: GRPCServiceDescriptor {
        DarksideStreamerClientMetadata.serviceDescriptor
    }

    var interceptors: DarksideStreamerClientInterceptorFactoryProtocol? {
        nil
    }

    func makeResetCall(
        _ request: DarksideMetaState,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<DarksideMetaState, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.reset.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResetInterceptors() ?? []
        )
    }

    func makeStageBlocksStreamCall(
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncClientStreamingCall<DarksideBlock, Empty> {
        makeAsyncClientStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocksStream.path,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksStreamInterceptors() ?? []
        )
    }

    func makeStageBlocksCall(
        _ request: DarksideBlocksURL,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<DarksideBlocksURL, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocks.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksInterceptors() ?? []
        )
    }

    func makeStageBlocksCreateCall(
        _ request: DarksideEmptyBlocks,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<DarksideEmptyBlocks, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocksCreate.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksCreateInterceptors() ?? []
        )
    }

    func makeStageTransactionsStreamCall(
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncClientStreamingCall<RawTransaction, Empty> {
        makeAsyncClientStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.stageTransactionsStream.path,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageTransactionsStreamInterceptors() ?? []
        )
    }

    func makeStageTransactionsCall(
        _ request: DarksideTransactionsURL,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<DarksideTransactionsURL, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageTransactionsInterceptors() ?? []
        )
    }

    func makeApplyStagedCall(
        _ request: DarksideHeight,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<DarksideHeight, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.applyStaged.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeApplyStagedInterceptors() ?? []
        )
    }

    func makeGetIncomingTransactionsCall(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncServerStreamingCall<Empty, RawTransaction> {
        makeAsyncServerStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.getIncomingTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetIncomingTransactionsInterceptors() ?? []
        )
    }

    func makeClearIncomingTransactionsCall(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Empty, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearIncomingTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearIncomingTransactionsInterceptors() ?? []
        )
    }

    func makeAddAddressUtxoCall(
        _ request: GetAddressUtxosReply,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<GetAddressUtxosReply, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.addAddressUtxo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddAddressUtxoInterceptors() ?? []
        )
    }

    func makeClearAddressUtxoCall(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Empty, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearAddressUtxo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearAddressUtxoInterceptors() ?? []
        )
    }

    func makeAddTreeStateCall(
        _ request: TreeState,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<TreeState, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.addTreeState.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddTreeStateInterceptors() ?? []
        )
    }

    func makeRemoveTreeStateCall(
        _ request: BlockID,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<BlockID, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.removeTreeState.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveTreeStateInterceptors() ?? []
        )
    }

    func makeClearAllTreeStatesCall(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Empty, Empty> {
        makeAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearAllTreeStates.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearAllTreeStatesInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension DarksideStreamerAsyncClientProtocol {
    func reset(
        _ request: DarksideMetaState,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.reset.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeResetInterceptors() ?? []
        )
    }

    func stageBlocksStream(
        _ requests: some Sequence<DarksideBlock>,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncClientStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocksStream.path,
            requests: requests,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksStreamInterceptors() ?? []
        )
    }

    func stageBlocksStream<RequestStream>(
        _ requests: RequestStream,
        callOptions: CallOptions? = nil
    ) async throws -> Empty where RequestStream: AsyncSequence & Sendable, RequestStream.Element == DarksideBlock {
        try await performAsyncClientStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocksStream.path,
            requests: requests,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksStreamInterceptors() ?? []
        )
    }

    func stageBlocks(
        _ request: DarksideBlocksURL,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocks.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksInterceptors() ?? []
        )
    }

    func stageBlocksCreate(
        _ request: DarksideEmptyBlocks,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageBlocksCreate.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageBlocksCreateInterceptors() ?? []
        )
    }

    func stageTransactionsStream(
        _ requests: some Sequence<RawTransaction>,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncClientStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.stageTransactionsStream.path,
            requests: requests,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageTransactionsStreamInterceptors() ?? []
        )
    }

    func stageTransactionsStream<RequestStream>(
        _ requests: RequestStream,
        callOptions: CallOptions? = nil
    ) async throws -> Empty where RequestStream: AsyncSequence & Sendable, RequestStream.Element == RawTransaction {
        try await performAsyncClientStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.stageTransactionsStream.path,
            requests: requests,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageTransactionsStreamInterceptors() ?? []
        )
    }

    func stageTransactions(
        _ request: DarksideTransactionsURL,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.stageTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeStageTransactionsInterceptors() ?? []
        )
    }

    func applyStaged(
        _ request: DarksideHeight,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.applyStaged.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeApplyStagedInterceptors() ?? []
        )
    }

    func getIncomingTransactions(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncResponseStream<RawTransaction> {
        performAsyncServerStreamingCall(
            path: DarksideStreamerClientMetadata.Methods.getIncomingTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetIncomingTransactionsInterceptors() ?? []
        )
    }

    func clearIncomingTransactions(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearIncomingTransactions.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearIncomingTransactionsInterceptors() ?? []
        )
    }

    func addAddressUtxo(
        _ request: GetAddressUtxosReply,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.addAddressUtxo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddAddressUtxoInterceptors() ?? []
        )
    }

    func clearAddressUtxo(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearAddressUtxo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearAddressUtxoInterceptors() ?? []
        )
    }

    func addTreeState(
        _ request: TreeState,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.addTreeState.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddTreeStateInterceptors() ?? []
        )
    }

    func removeTreeState(
        _ request: BlockID,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.removeTreeState.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveTreeStateInterceptors() ?? []
        )
    }

    func clearAllTreeStates(
        _ request: Empty,
        callOptions: CallOptions? = nil
    ) async throws -> Empty {
        try await performAsyncUnaryCall(
            path: DarksideStreamerClientMetadata.Methods.clearAllTreeStates.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeClearAllTreeStatesInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DarksideStreamerAsyncClient: DarksideStreamerAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: DarksideStreamerClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: DarksideStreamerClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol DarksideStreamerClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'reset'.
    func makeResetInterceptors() -> [ClientInterceptor<DarksideMetaState, Empty>]

    /// - Returns: Interceptors to use when invoking 'stageBlocksStream'.
    func makeStageBlocksStreamInterceptors() -> [ClientInterceptor<DarksideBlock, Empty>]

    /// - Returns: Interceptors to use when invoking 'stageBlocks'.
    func makeStageBlocksInterceptors() -> [ClientInterceptor<DarksideBlocksURL, Empty>]

    /// - Returns: Interceptors to use when invoking 'stageBlocksCreate'.
    func makeStageBlocksCreateInterceptors() -> [ClientInterceptor<DarksideEmptyBlocks, Empty>]

    /// - Returns: Interceptors to use when invoking 'stageTransactionsStream'.
    func makeStageTransactionsStreamInterceptors() -> [ClientInterceptor<RawTransaction, Empty>]

    /// - Returns: Interceptors to use when invoking 'stageTransactions'.
    func makeStageTransactionsInterceptors() -> [ClientInterceptor<DarksideTransactionsURL, Empty>]

    /// - Returns: Interceptors to use when invoking 'applyStaged'.
    func makeApplyStagedInterceptors() -> [ClientInterceptor<DarksideHeight, Empty>]

    /// - Returns: Interceptors to use when invoking 'getIncomingTransactions'.
    func makeGetIncomingTransactionsInterceptors() -> [ClientInterceptor<Empty, RawTransaction>]

    /// - Returns: Interceptors to use when invoking 'clearIncomingTransactions'.
    func makeClearIncomingTransactionsInterceptors() -> [ClientInterceptor<Empty, Empty>]

    /// - Returns: Interceptors to use when invoking 'addAddressUtxo'.
    func makeAddAddressUtxoInterceptors() -> [ClientInterceptor<GetAddressUtxosReply, Empty>]

    /// - Returns: Interceptors to use when invoking 'clearAddressUtxo'.
    func makeClearAddressUtxoInterceptors() -> [ClientInterceptor<Empty, Empty>]

    /// - Returns: Interceptors to use when invoking 'addTreeState'.
    func makeAddTreeStateInterceptors() -> [ClientInterceptor<TreeState, Empty>]

    /// - Returns: Interceptors to use when invoking 'removeTreeState'.
    func makeRemoveTreeStateInterceptors() -> [ClientInterceptor<BlockID, Empty>]

    /// - Returns: Interceptors to use when invoking 'clearAllTreeStates'.
    func makeClearAllTreeStatesInterceptors() -> [ClientInterceptor<Empty, Empty>]
}

public enum DarksideStreamerClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "DarksideStreamer",
        fullName: "cash.z.wallet.sdk.rpc.DarksideStreamer",
        methods: [
            DarksideStreamerClientMetadata.Methods.reset,
            DarksideStreamerClientMetadata.Methods.stageBlocksStream,
            DarksideStreamerClientMetadata.Methods.stageBlocks,
            DarksideStreamerClientMetadata.Methods.stageBlocksCreate,
            DarksideStreamerClientMetadata.Methods.stageTransactionsStream,
            DarksideStreamerClientMetadata.Methods.stageTransactions,
            DarksideStreamerClientMetadata.Methods.applyStaged,
            DarksideStreamerClientMetadata.Methods.getIncomingTransactions,
            DarksideStreamerClientMetadata.Methods.clearIncomingTransactions,
            DarksideStreamerClientMetadata.Methods.addAddressUtxo,
            DarksideStreamerClientMetadata.Methods.clearAddressUtxo,
            DarksideStreamerClientMetadata.Methods.addTreeState,
            DarksideStreamerClientMetadata.Methods.removeTreeState,
            DarksideStreamerClientMetadata.Methods.clearAllTreeStates,
        ]
    )

    public enum Methods {
        public static let reset = GRPCMethodDescriptor(
            name: "Reset",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/Reset",
            type: GRPCCallType.unary
        )

        public static let stageBlocksStream = GRPCMethodDescriptor(
            name: "StageBlocksStream",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/StageBlocksStream",
            type: GRPCCallType.clientStreaming
        )

        public static let stageBlocks = GRPCMethodDescriptor(
            name: "StageBlocks",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/StageBlocks",
            type: GRPCCallType.unary
        )

        public static let stageBlocksCreate = GRPCMethodDescriptor(
            name: "StageBlocksCreate",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/StageBlocksCreate",
            type: GRPCCallType.unary
        )

        public static let stageTransactionsStream = GRPCMethodDescriptor(
            name: "StageTransactionsStream",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/StageTransactionsStream",
            type: GRPCCallType.clientStreaming
        )

        public static let stageTransactions = GRPCMethodDescriptor(
            name: "StageTransactions",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/StageTransactions",
            type: GRPCCallType.unary
        )

        public static let applyStaged = GRPCMethodDescriptor(
            name: "ApplyStaged",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/ApplyStaged",
            type: GRPCCallType.unary
        )

        public static let getIncomingTransactions = GRPCMethodDescriptor(
            name: "GetIncomingTransactions",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/GetIncomingTransactions",
            type: GRPCCallType.serverStreaming
        )

        public static let clearIncomingTransactions = GRPCMethodDescriptor(
            name: "ClearIncomingTransactions",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/ClearIncomingTransactions",
            type: GRPCCallType.unary
        )

        public static let addAddressUtxo = GRPCMethodDescriptor(
            name: "AddAddressUtxo",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/AddAddressUtxo",
            type: GRPCCallType.unary
        )

        public static let clearAddressUtxo = GRPCMethodDescriptor(
            name: "ClearAddressUtxo",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/ClearAddressUtxo",
            type: GRPCCallType.unary
        )

        public static let addTreeState = GRPCMethodDescriptor(
            name: "AddTreeState",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/AddTreeState",
            type: GRPCCallType.unary
        )

        public static let removeTreeState = GRPCMethodDescriptor(
            name: "RemoveTreeState",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/RemoveTreeState",
            type: GRPCCallType.unary
        )

        public static let clearAllTreeStates = GRPCMethodDescriptor(
            name: "ClearAllTreeStates",
            path: "/cash.z.wallet.sdk.rpc.DarksideStreamer/ClearAllTreeStates",
            type: GRPCCallType.unary
        )
    }
}
