// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: darkside.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2019-2020 The Zcash developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php .

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct DarksideMetaState {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var saplingActivation: Int32 = 0

    public var branchID: String = .init()

    public var chainName: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// A block is a hex-encoded string.
public struct DarksideBlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var block: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// DarksideBlocksURL is typically something like:
/// https://raw.githubusercontent.com/zcash-hackworks/darksidewalletd-test-data/master/basic-reorg/before-reorg.txt
public struct DarksideBlocksURL {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var url: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// DarksideTransactionsURL refers to an HTTP source that contains a list
/// of hex-encoded transactions, one per line, that are to be associated
/// with the given height (fake-mined into the block at that height)
public struct DarksideTransactionsURL {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var height: Int32 = 0

    public var url: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct DarksideHeight {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var height: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct DarksideEmptyBlocks {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var height: Int32 = 0

    public var nonce: Int32 = 0

    public var count: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension DarksideMetaState: @unchecked Sendable {}
    extension DarksideBlock: @unchecked Sendable {}
    extension DarksideBlocksURL: @unchecked Sendable {}
    extension DarksideTransactionsURL: @unchecked Sendable {}
    extension DarksideHeight: @unchecked Sendable {}
    extension DarksideEmptyBlocks: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "cash.z.wallet.sdk.rpc"

extension DarksideMetaState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DarksideMetaState"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "saplingActivation"),
        2: .same(proto: "branchID"),
        3: .same(proto: "chainName"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &saplingActivation)
            case 2: try decoder.decodeSingularStringField(value: &branchID)
            case 3: try decoder.decodeSingularStringField(value: &chainName)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if saplingActivation != 0 {
            try visitor.visitSingularInt32Field(value: saplingActivation, fieldNumber: 1)
        }
        if !branchID.isEmpty {
            try visitor.visitSingularStringField(value: branchID, fieldNumber: 2)
        }
        if !chainName.isEmpty {
            try visitor.visitSingularStringField(value: chainName, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: DarksideMetaState, rhs: DarksideMetaState) -> Bool {
        if lhs.saplingActivation != rhs.saplingActivation { return false }
        if lhs.branchID != rhs.branchID { return false }
        if lhs.chainName != rhs.chainName { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DarksideBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DarksideBlock"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "block"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &block)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !block.isEmpty {
            try visitor.visitSingularStringField(value: block, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: DarksideBlock, rhs: DarksideBlock) -> Bool {
        if lhs.block != rhs.block { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DarksideBlocksURL: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DarksideBlocksURL"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "url"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &url)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !url.isEmpty {
            try visitor.visitSingularStringField(value: url, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: DarksideBlocksURL, rhs: DarksideBlocksURL) -> Bool {
        if lhs.url != rhs.url { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DarksideTransactionsURL: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DarksideTransactionsURL"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "height"),
        2: .same(proto: "url"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &height)
            case 2: try decoder.decodeSingularStringField(value: &url)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if height != 0 {
            try visitor.visitSingularInt32Field(value: height, fieldNumber: 1)
        }
        if !url.isEmpty {
            try visitor.visitSingularStringField(value: url, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: DarksideTransactionsURL, rhs: DarksideTransactionsURL) -> Bool {
        if lhs.height != rhs.height { return false }
        if lhs.url != rhs.url { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DarksideHeight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DarksideHeight"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "height"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &height)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if height != 0 {
            try visitor.visitSingularInt32Field(value: height, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: DarksideHeight, rhs: DarksideHeight) -> Bool {
        if lhs.height != rhs.height { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension DarksideEmptyBlocks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DarksideEmptyBlocks"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "height"),
        2: .same(proto: "nonce"),
        3: .same(proto: "count"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &height)
            case 2: try decoder.decodeSingularInt32Field(value: &nonce)
            case 3: try decoder.decodeSingularInt32Field(value: &count)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if height != 0 {
            try visitor.visitSingularInt32Field(value: height, fieldNumber: 1)
        }
        if nonce != 0 {
            try visitor.visitSingularInt32Field(value: nonce, fieldNumber: 2)
        }
        if count != 0 {
            try visitor.visitSingularInt32Field(value: count, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: DarksideEmptyBlocks, rhs: DarksideEmptyBlocks) -> Bool {
        if lhs.height != rhs.height { return false }
        if lhs.nonce != rhs.nonce { return false }
        if lhs.count != rhs.count { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
